<mxfile host="app.diagrams.net" modified="2022-01-04T19:06:42.934Z" agent="5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36" etag="TKlgKig5Y_bjUOoUxGx6" version="15.9.1" type="github">
  <diagram id="CkWZjeMWKiB9YpNZttG5" name="Page-1">
    <mxGraphModel dx="1730" dy="958" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="1654" pageHeight="2336" background="none" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="lSssQ-DfVgilNFe0-9mz-18" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;fontFamily=Helvetica;fontSize=12;entryX=0;entryY=0.5;entryDx=0;entryDy=0;" parent="1" source="lSssQ-DfVgilNFe0-9mz-2" edge="1">
          <mxGeometry relative="1" as="geometry">
            <mxPoint x="328" y="135" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="lSssQ-DfVgilNFe0-9mz-2" value="React.&lt;br&gt;PureComponent()&lt;br&gt;" style="whiteSpace=wrap;html=1;aspect=fixed;fillColor=#dae8fc;strokeColor=#6c8ebf;sketch=1;" parent="1" vertex="1">
          <mxGeometry x="148" y="80" width="110" height="110" as="geometry" />
        </mxCell>
        <mxCell id="lSssQ-DfVgilNFe0-9mz-5" value="&lt;font style=&quot;font-size: 12px&quot;&gt;uses &lt;b&gt;shouldComponentUpdate()&lt;/b&gt;&lt;br&gt;to perform a shallow comparisons and Updates the Component&lt;br&gt;&lt;br&gt;&lt;span style=&quot;color: rgb(58 , 58 , 58) ; font-family: , &amp;#34;roboto&amp;#34; , &amp;#34;arial&amp;#34; , sans-serif ; background-color: rgb(254 , 254 , 254)&quot;&gt;&amp;nbsp;A component is said to be pure if it is guaranteed to return the same result given the same props and state.&lt;br&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(41 , 41 , 41) ; letter-spacing: -0.063px ; background-color: rgb(255 , 255 , 255)&quot;&gt;Pure Components gives a considerable increase in performance because it reduces the number of render operation in the application which is a huge win for complex UI and therefore advised to use if possible.&lt;/span&gt;&lt;span style=&quot;color: rgb(58 , 58 , 58) ; font-family: , &amp;#34;roboto&amp;#34; , &amp;#34;arial&amp;#34; , sans-serif ; background-color: rgb(254 , 254 , 254)&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/font&gt;" style="text;html=1;strokeColor=none;fillColor=none;align=left;verticalAlign=middle;whiteSpace=wrap;rounded=0;" parent="1" vertex="1">
          <mxGeometry x="148" y="210" width="260" height="200" as="geometry" />
        </mxCell>
        <mxCell id="lSssQ-DfVgilNFe0-9mz-14" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;fontFamily=Helvetica;fontSize=12;entryX=0;entryY=0.5;entryDx=0;entryDy=0;" parent="1" source="lSssQ-DfVgilNFe0-9mz-6" target="lSssQ-DfVgilNFe0-9mz-15" edge="1">
          <mxGeometry relative="1" as="geometry">
            <mxPoint x="710" y="255" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="lSssQ-DfVgilNFe0-9mz-6" value="React.&lt;br&gt;Memo" style="whiteSpace=wrap;html=1;aspect=fixed;fillColor=#dae8fc;strokeColor=#6c8ebf;sketch=1;rounded=0;shadow=0;" parent="1" vertex="1">
          <mxGeometry x="530" y="180" width="110" height="110" as="geometry" />
        </mxCell>
        <mxCell id="lSssQ-DfVgilNFe0-9mz-8" value="&lt;font style=&quot;font-size: 12px&quot;&gt;&lt;span style=&quot;color: rgb(34 , 34 , 34) ; background-color: rgb(255 , 255 , 255)&quot;&gt;&lt;font style=&quot;font-size: 12px&quot;&gt;&lt;b&gt;HOC are use to deal with Functional Components&lt;br&gt;&lt;br&gt;&lt;/b&gt;Takes a component as a prop and returns a component that prevents a component from re-rendering if the props (or values within it) have not changed.&lt;br&gt;&lt;br&gt;&lt;/font&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(34 , 34 , 34) ; text-align: center ; background-color: rgb(255 , 255 , 255)&quot;&gt;Optimizing a functional component so that React can treat it as a pure component shouldnâ€™t necessarily require that the component be converted to a class component.&lt;/span&gt;&lt;span style=&quot;color: rgb(34 , 34 , 34) ; background-color: rgb(255 , 255 , 255)&quot;&gt;&lt;font style=&quot;font-size: 12px&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/span&gt;&lt;/font&gt;" style="text;html=1;strokeColor=none;fillColor=none;align=left;verticalAlign=middle;whiteSpace=wrap;rounded=0;" parent="1" vertex="1">
          <mxGeometry x="530" y="320" width="330" height="70" as="geometry" />
        </mxCell>
        <mxCell id="lSssQ-DfVgilNFe0-9mz-9" value="&lt;p&gt;&lt;font style=&quot;font-size: 12px&quot;&gt;&lt;code class=&quot; prettyprinted&quot; style=&quot;box-sizing: inherit ; padding: 0.2rem 0.4rem ; color: rgb(189 , 65 , 71) ; background-color: rgb(247 , 247 , 249) ; border-radius: 0.25rem&quot;&gt;&lt;span class=&quot;typ&quot; style=&quot;box-sizing: inherit&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;box-sizing: inherit&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;box-sizing: inherit&quot;&gt;memo&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;box-sizing: inherit&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;span style=&quot;color: rgb(34 , 34 , 34) ; background-color: rgb(255 , 255 , 255)&quot;&gt;&amp;nbsp;was released with&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;https://reactjs.org/blog/2018/10/23/react-v-16-6.html&quot; target=&quot;_blank&quot; style=&quot;box-sizing: inherit ; background-color: rgb(255 , 255 , 255) ; color: rgb(118 , 74 , 188)&quot;&gt;React v16.6&lt;/a&gt;&lt;span style=&quot;color: rgb(34 , 34 , 34) ; background-color: rgb(255 , 255 , 255)&quot;&gt;. While class components already allowed you to control re-renders with the use of&amp;nbsp;&lt;/span&gt;&lt;code class=&quot; prettyprinted&quot; style=&quot;box-sizing: inherit ; padding: 0.2rem 0.4rem ; color: rgb(189 , 65 , 71) ; background-color: rgb(247 , 247 , 249) ; border-radius: 0.25rem&quot;&gt;&lt;a href=&quot;https://reactjs.org/docs/react-api.html#reactpurecomponent&quot; target=&quot;_blank&quot; style=&quot;box-sizing: inherit ; background-color: transparent ; color: rgb(118 , 74 , 188)&quot;&gt;PureComponent&lt;/a&gt;&lt;/code&gt;&lt;span style=&quot;color: rgb(34 , 34 , 34) ; background-color: rgb(255 , 255 , 255)&quot;&gt;&amp;nbsp;or&amp;nbsp;&lt;/span&gt;&lt;code class=&quot; prettyprinted&quot; style=&quot;box-sizing: inherit ; padding: 0.2rem 0.4rem ; color: rgb(189 , 65 , 71) ; background-color: rgb(247 , 247 , 249) ; border-radius: 0.25rem&quot;&gt;&lt;a href=&quot;https://reactjs.org/docs/react-component.html#shouldcomponentupdate&quot; target=&quot;_blank&quot; style=&quot;box-sizing: inherit ; background-color: transparent ; color: rgb(118 , 74 , 188)&quot;&gt;shouldComponentUpdate&lt;/a&gt;&lt;/code&gt;&lt;span style=&quot;color: rgb(34 , 34 , 34) ; background-color: rgb(255 , 255 , 255)&quot;&gt;, React 16.6 introduced the ability to do the same with functional components.&lt;/span&gt;&lt;/font&gt;&lt;/p&gt;" style="text;html=1;strokeColor=none;fillColor=none;align=left;verticalAlign=middle;whiteSpace=wrap;rounded=0;" parent="1" vertex="1">
          <mxGeometry x="528.5" y="80" width="353" height="85" as="geometry" />
        </mxCell>
        <mxCell id="lSssQ-DfVgilNFe0-9mz-12" value="&lt;font style=&quot;font-size: 12px&quot;&gt;&lt;span style=&quot;color: rgb(34, 34, 34);&quot;&gt;While&amp;nbsp;&lt;/span&gt;&lt;code class=&quot; prettyprinted&quot; style=&quot;box-sizing: inherit; padding: 0.2rem 0.4rem; color: rgb(189, 65, 71); border-radius: 0.25rem;&quot;&gt;&lt;span class=&quot;typ&quot; style=&quot;box-sizing: inherit&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;box-sizing: inherit&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;box-sizing: inherit&quot;&gt;memo&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;box-sizing: inherit&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;span style=&quot;color: rgb(34, 34, 34);&quot;&gt;&amp;nbsp;is a HOC,&amp;nbsp;&lt;/span&gt;&lt;code class=&quot; prettyprinted&quot; style=&quot;box-sizing: inherit; padding: 0.2rem 0.4rem; color: rgb(189, 65, 71); border-radius: 0.25rem;&quot;&gt;&lt;a href=&quot;https://blog.logrocket.com/react-reference-guide-hooks-api/#usememo&quot; style=&quot;box-sizing: inherit; color: rgb(118, 74, 188);&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;box-sizing: inherit&quot;&gt;useMemo&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;box-sizing: inherit&quot;&gt;()&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;span style=&quot;color: rgb(34, 34, 34);&quot;&gt;&amp;nbsp;is a React Hook. With&amp;nbsp;&lt;/span&gt;&lt;code class=&quot; prettyprinted&quot; style=&quot;box-sizing: inherit; padding: 0.2rem 0.4rem; color: rgb(189, 65, 71); border-radius: 0.25rem;&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;box-sizing: inherit&quot;&gt;useMemo&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;box-sizing: inherit&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;span style=&quot;color: rgb(34, 34, 34);&quot;&gt;, we can return memoized values and avoid re-rendering if the dependencies to a function have not changed.&lt;/span&gt;&lt;/font&gt;" style="text;html=1;strokeColor=none;fillColor=none;align=left;verticalAlign=middle;whiteSpace=wrap;rounded=0;labelBackgroundColor=default;" parent="1" vertex="1">
          <mxGeometry x="530" y="556" width="330" height="70" as="geometry" />
        </mxCell>
        <mxCell id="lSssQ-DfVgilNFe0-9mz-16" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;fontFamily=Helvetica;fontSize=12;" parent="1" edge="1">
          <mxGeometry relative="1" as="geometry">
            <mxPoint x="720" y="491" as="targetPoint" />
            <mxPoint x="640" y="491" as="sourcePoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="lSssQ-DfVgilNFe0-9mz-13" value="React.&lt;br&gt;useMemo" style="whiteSpace=wrap;html=1;aspect=fixed;fillColor=#dae8fc;strokeColor=#6c8ebf;sketch=1;" parent="1" vertex="1">
          <mxGeometry x="530" y="437" width="110" height="110" as="geometry" />
        </mxCell>
        <mxCell id="lSssQ-DfVgilNFe0-9mz-21" style="edgeStyle=orthogonalEdgeStyle;curved=1;orthogonalLoop=1;jettySize=auto;html=1;entryX=1;entryY=0.5;entryDx=0;entryDy=0;fontFamily=Helvetica;fontSize=12;" parent="1" source="lSssQ-DfVgilNFe0-9mz-15" target="lSssQ-DfVgilNFe0-9mz-8" edge="1">
          <mxGeometry relative="1" as="geometry">
            <Array as="points">
              <mxPoint x="815" y="295" />
              <mxPoint x="880" y="295" />
              <mxPoint x="880" y="355" />
            </Array>
          </mxGeometry>
        </mxCell>
        <mxCell id="lSssQ-DfVgilNFe0-9mz-15" value="&lt;span style=&quot;color: rgb(0, 0, 0); font-family: helvetica; font-style: normal; font-weight: 400; letter-spacing: normal; text-align: left; text-indent: 0px; text-transform: none; word-spacing: 0px; background-color: rgb(248, 249, 250); font-size: 16px;&quot;&gt;Higher Order Component&lt;/span&gt;&lt;br style=&quot;color: rgb(0, 0, 0); font-family: helvetica; font-size: 12px; font-style: normal; font-weight: 400; letter-spacing: normal; text-align: left; text-indent: 0px; text-transform: none; word-spacing: 0px; background-color: rgb(248, 249, 250);&quot;&gt;" style="text;whiteSpace=wrap;html=1;fontSize=12;fontFamily=Helvetica;" parent="1" vertex="1">
          <mxGeometry x="710" y="220" width="210" height="30" as="geometry" />
        </mxCell>
        <mxCell id="lSssQ-DfVgilNFe0-9mz-22" style="edgeStyle=orthogonalEdgeStyle;curved=1;orthogonalLoop=1;jettySize=auto;html=1;fontFamily=Helvetica;fontSize=12;exitX=1;exitY=0.5;exitDx=0;exitDy=0;" parent="1" source="lSssQ-DfVgilNFe0-9mz-17" edge="1">
          <mxGeometry relative="1" as="geometry">
            <mxPoint x="780" y="560" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="lSssQ-DfVgilNFe0-9mz-17" value="&lt;span style=&quot;color: rgb(0 , 0 , 0) ; font-family: &amp;#34;helvetica&amp;#34; ; font-style: normal ; font-weight: 400 ; letter-spacing: normal ; text-align: left ; text-indent: 0px ; text-transform: none ; word-spacing: 0px ; background-color: rgb(248 , 249 , 250) ; font-size: 16px&quot;&gt;Hook&lt;/span&gt;" style="text;whiteSpace=wrap;html=1;fontSize=12;fontFamily=Helvetica;" parent="1" vertex="1">
          <mxGeometry x="722" y="476" width="38" height="30" as="geometry" />
        </mxCell>
        <mxCell id="lSssQ-DfVgilNFe0-9mz-20" style="edgeStyle=orthogonalEdgeStyle;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;entryX=1;entryY=0.5;entryDx=0;entryDy=0;fontFamily=Helvetica;fontSize=12;curved=1;" parent="1" source="lSssQ-DfVgilNFe0-9mz-19" target="lSssQ-DfVgilNFe0-9mz-5" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="lSssQ-DfVgilNFe0-9mz-34" style="edgeStyle=orthogonalEdgeStyle;curved=1;orthogonalLoop=1;jettySize=auto;html=1;entryX=1.008;entryY=0.55;entryDx=0;entryDy=0;entryPerimeter=0;fontFamily=Helvetica;fontSize=12;fontColor=#FF0000;" parent="1" source="lSssQ-DfVgilNFe0-9mz-19" target="lSssQ-DfVgilNFe0-9mz-33" edge="1">
          <mxGeometry relative="1" as="geometry">
            <Array as="points">
              <mxPoint x="480" y="135" />
              <mxPoint x="480" y="480" />
            </Array>
          </mxGeometry>
        </mxCell>
        <mxCell id="lSssQ-DfVgilNFe0-9mz-19" value="&lt;span style=&quot;color: rgb(0 , 0 , 0) ; font-family: &amp;#34;helvetica&amp;#34; ; font-style: normal ; font-weight: 400 ; letter-spacing: normal ; text-align: left ; text-indent: 0px ; text-transform: none ; word-spacing: 0px ; background-color: rgb(248 , 249 , 250) ; font-size: 16px&quot;&gt;PureComponent&lt;/span&gt;" style="text;whiteSpace=wrap;html=1;fontSize=12;fontFamily=Helvetica;" parent="1" vertex="1">
          <mxGeometry x="334" y="120" width="120" height="30" as="geometry" />
        </mxCell>
        <mxCell id="lSssQ-DfVgilNFe0-9mz-23" value="Statefull Components" style="text;html=1;strokeColor=#82b366;fillColor=#d5e8d4;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;labelBackgroundColor=default;sketch=1;fontFamily=Helvetica;fontSize=12;" parent="1" vertex="1">
          <mxGeometry x="1000" y="80" width="120" height="30" as="geometry" />
        </mxCell>
        <mxCell id="lSssQ-DfVgilNFe0-9mz-24" value="Stateless Components" style="text;html=1;strokeColor=#82b366;fillColor=#D5E8D4;align=left;verticalAlign=middle;whiteSpace=wrap;rounded=0;labelBackgroundColor=default;sketch=1;fontFamily=Helvetica;fontSize=12;" parent="1" vertex="1">
          <mxGeometry x="1320" y="80" width="130" height="30" as="geometry" />
        </mxCell>
        <mxCell id="lSssQ-DfVgilNFe0-9mz-25" value="&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;color: rgb(58 , 58 , 58) ; font-style: normal ; font-weight: 400 ; letter-spacing: normal ; text-indent: 0px ; text-transform: none ; word-spacing: 0px ; background-color: rgb(254 , 254 , 254) ; display: inline ; float: none&quot;&gt;&lt;font style=&quot;font-size: 12px&quot;&gt;Stateful components are always class based components.&lt;/font&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;span style=&quot;color: rgb(58 , 58 , 58) ; font-style: normal ; font-weight: 400 ; letter-spacing: normal ; text-indent: 0px ; text-transform: none ; word-spacing: 0px ; background-color: rgb(254 , 254 , 254) ; display: inline ; float: none&quot;&gt;&lt;font style=&quot;font-size: 12px&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/span&gt;" style="text;whiteSpace=wrap;html=1;fontSize=12;fontFamily=Helvetica;" parent="1" vertex="1">
          <mxGeometry x="1000" y="120" width="240" height="40" as="geometry" />
        </mxCell>
        <mxCell id="lSssQ-DfVgilNFe0-9mz-26" value="&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-style: normal ; font-weight: 400 ; letter-spacing: normal ; text-indent: 0px ; text-transform: none ; word-spacing: 0px ; background-color: rgb(254 , 254 , 254) ; display: inline ; float: none&quot;&gt;&lt;font style=&quot;font-size: 12px&quot;&gt;&lt;font style=&quot;font-size: 12px&quot;&gt;&lt;font color=&quot;#3a3a3a&quot; style=&quot;font-size: 12px&quot;&gt;You can use either a function&amp;nbsp;or a class for creating stateless components. &lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-style: normal ; font-weight: 400 ; letter-spacing: normal ; text-indent: 0px ; text-transform: none ; word-spacing: 0px ; background-color: rgb(254 , 254 , 254) ; display: inline ; float: none&quot;&gt;&lt;font style=&quot;font-size: 12px&quot;&gt;&lt;font style=&quot;font-size: 12px&quot;&gt;&lt;font color=&quot;#3a3a3a&quot; style=&quot;font-size: 12px&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-style: normal ; font-weight: 400 ; letter-spacing: normal ; text-indent: 0px ; text-transform: none ; word-spacing: 0px ; background-color: rgb(254 , 254 , 254) ; display: inline ; float: none&quot;&gt;&lt;font style=&quot;font-size: 12px&quot;&gt;&lt;font style=&quot;font-size: 12px&quot;&gt;&lt;span style=&quot;color: rgb(41 , 41 , 41) ; letter-spacing: -0.063px ; background-color: rgb(255 , 255 , 255)&quot;&gt;A stateless component is functional component just a javascript function which returns a React element.&amp;nbsp;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-style: normal ; font-weight: 400 ; letter-spacing: normal ; text-indent: 0px ; text-transform: none ; word-spacing: 0px ; background-color: rgb(254 , 254 , 254) ; display: inline ; float: none&quot;&gt;&lt;font style=&quot;font-size: 12px&quot;&gt;&lt;font style=&quot;font-size: 12px&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/font&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-style: normal ; font-weight: 400 ; letter-spacing: normal ; text-indent: 0px ; text-transform: none ; word-spacing: 0px ; background-color: rgb(254 , 254 , 254) ; display: inline ; float: none&quot;&gt;&lt;font style=&quot;font-size: 12px&quot;&gt;&lt;font style=&quot;font-size: 12px&quot;&gt;&lt;span style=&quot;color: rgb(34 , 34 , 34) ; background-color: rgb(255 , 255 , 255)&quot;&gt;Functional components are very useful in React, especially when you want to isolate state management from the component. Thatâ€™s why they are often called&amp;nbsp;stateless components.&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;span style=&quot;font-style: normal ; font-weight: 400 ; letter-spacing: normal ; text-indent: 0px ; text-transform: none ; word-spacing: 0px ; background-color: rgb(254 , 254 , 254) ; display: inline ; float: none&quot;&gt;&lt;font style=&quot;font-size: 12px&quot;&gt;&lt;font style=&quot;font-size: 12px&quot;&gt;&lt;br&gt;&lt;font color=&quot;#ff0000&quot; style=&quot;font-size: 12px&quot;&gt;But unless you need to use a lifecycle hook in your components, you should go for stateless functional components.&lt;/font&gt;&lt;/font&gt;&lt;br&gt;&lt;/font&gt;&lt;/span&gt;" style="text;whiteSpace=wrap;html=1;fontSize=12;fontFamily=Helvetica;" parent="1" vertex="1">
          <mxGeometry x="1320" y="110" width="240" height="230" as="geometry" />
        </mxCell>
        <mxCell id="lSssQ-DfVgilNFe0-9mz-30" value="&lt;font style=&quot;font-size: 12px&quot;&gt;&lt;span style=&quot;color: rgb(58 , 58 , 58) ; font-family: , &amp;quot;roboto&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif ; background-color: rgb(254 , 254 , 254)&quot;&gt;&lt;ul&gt;&lt;li&gt;&lt;font style=&quot;font-size: 12px&quot;&gt;&lt;span style=&quot;color: rgb(58 , 58 , 58) ; font-family: , &amp;quot;roboto&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif ; background-color: rgb(254 , 254 , 254)&quot;&gt;State is an &lt;b&gt;object &lt;/b&gt;that is owned by the component where it is declared. &lt;/span&gt;&lt;/font&gt;&lt;/li&gt;&lt;li&gt;&lt;font style=&quot;font-size: 12px&quot;&gt;&lt;span style=&quot;color: rgb(58 , 58 , 58) ; font-family: , &amp;quot;roboto&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif ; background-color: rgb(254 , 254 , 254)&quot;&gt;Its scope is limited to the current component. A component can initialize its state and update it whenever necessary. The state of the parent component usually ends up being props of the child component. When the state is passed out of the current scope, we refer to it as a prop.&lt;/span&gt;&lt;/font&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(58 , 58 , 58) ; background-color: rgb(254 , 254 , 254)&quot;&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;&lt;font style=&quot;font-size: 12px&quot;&gt;&lt;span style=&quot;color: rgb(58 , 58 , 58) ; background-color: rgb(254 , 254 , 254)&quot;&gt;React philosophy is that props should be immutable and top-down. What this means is that a parent component can pass on whatever data it wants to its children as props, but the child component cannot modify its props.&lt;/span&gt;&lt;/font&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/span&gt;&lt;/font&gt;" style="text;html=1;strokeColor=none;fillColor=none;align=left;verticalAlign=middle;whiteSpace=wrap;rounded=0;labelBackgroundColor=default;sketch=1;fontFamily=Helvetica;fontSize=12;fontColor=#FF0000;labelBorderColor=none;" parent="1" vertex="1">
          <mxGeometry x="1000" y="370" width="260" height="260" as="geometry" />
        </mxCell>
        <mxCell id="lSssQ-DfVgilNFe0-9mz-31" value="State Vs Props" style="text;html=1;strokeColor=#82b366;fillColor=#d5e8d4;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;labelBackgroundColor=default;sketch=1;fontFamily=Helvetica;fontSize=12;" parent="1" vertex="1">
          <mxGeometry x="1000" y="320" width="120" height="30" as="geometry" />
        </mxCell>
        <mxCell id="lSssQ-DfVgilNFe0-9mz-33" value="&lt;font style=&quot;font-size: 12px&quot;&gt;&lt;ul style=&quot;box-sizing: inherit ; margin-top: 0px ; margin-bottom: 2rem ; color: rgb(34 , 34 , 34) ; background-color: rgb(255 , 255 , 255)&quot;&gt;&lt;li style=&quot;box-sizing: inherit&quot;&gt;Its return value is only determined by its input values&lt;/li&gt;&lt;li style=&quot;box-sizing: inherit&quot;&gt;Its return value is always the same for the same input values&lt;/li&gt;&lt;/ul&gt;&lt;/font&gt;" style="text;html=1;strokeColor=none;fillColor=none;align=left;verticalAlign=middle;whiteSpace=wrap;rounded=0;" parent="1" vertex="1">
          <mxGeometry x="148" y="430" width="260" height="90" as="geometry" />
        </mxCell>
        <mxCell id="lSssQ-DfVgilNFe0-9mz-35" value="&lt;span style=&quot;font-family: &amp;#34;merriweather&amp;#34;&quot;&gt;&lt;font color=&quot;#cc6600&quot; style=&quot;font-size: 16px&quot;&gt;Memoization uses up memory space on the machine itâ€™s being run on and, as such, may lead to unintended effects.&lt;/font&gt;&lt;/span&gt;" style="rounded=0;whiteSpace=wrap;html=1;labelBackgroundColor=default;sketch=1;fontFamily=Helvetica;fontSize=12;fontColor=#FF0000;fillColor=#D5E8D4;align=left;" parent="1" vertex="1">
          <mxGeometry x="520" y="646" width="370" height="64" as="geometry" />
        </mxCell>
        <mxCell id="lSssQ-DfVgilNFe0-9mz-37" value="" style="shape=image;html=1;verticalAlign=top;verticalLabelPosition=bottom;labelBackgroundColor=#ffffff;imageAspect=0;aspect=fixed;image=https://cdn1.iconfinder.com/data/icons/unicons-line-vol-5/24/react-128.png;rounded=0;shadow=0;labelBorderColor=default;sketch=1;fontFamily=Helvetica;fontSize=16;fontColor=#CC6600;fillColor=none;" parent="1" vertex="1">
          <mxGeometry x="178.5" y="80" width="49" height="49" as="geometry" />
        </mxCell>
        <mxCell id="lSssQ-DfVgilNFe0-9mz-39" value="" style="shape=image;html=1;verticalAlign=top;verticalLabelPosition=bottom;labelBackgroundColor=#ffffff;imageAspect=0;aspect=fixed;image=https://cdn1.iconfinder.com/data/icons/unicons-line-vol-5/24/react-128.png;rounded=0;shadow=0;labelBorderColor=default;sketch=1;fontFamily=Helvetica;fontSize=16;fontColor=#CC6600;fillColor=none;" parent="1" vertex="1">
          <mxGeometry x="560.5" y="180" width="49" height="49" as="geometry" />
        </mxCell>
        <mxCell id="lSssQ-DfVgilNFe0-9mz-40" value="" style="shape=image;html=1;verticalAlign=top;verticalLabelPosition=bottom;labelBackgroundColor=#ffffff;imageAspect=0;aspect=fixed;image=https://cdn1.iconfinder.com/data/icons/unicons-line-vol-5/24/react-128.png;rounded=0;shadow=0;labelBorderColor=default;sketch=1;fontFamily=Helvetica;fontSize=16;fontColor=#CC6600;fillColor=none;" parent="1" vertex="1">
          <mxGeometry x="560.5" y="437" width="49" height="49" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
